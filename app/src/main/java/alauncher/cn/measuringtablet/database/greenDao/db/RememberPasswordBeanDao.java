package alauncher.cn.measuringtablet.database.greenDao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import alauncher.cn.measuringtablet.bean.RememberPasswordBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "REMEMBER_PASSWORD_BEAN".
*/
public class RememberPasswordBeanDao extends AbstractDao<RememberPasswordBean, Long> {

    public static final String TABLENAME = "REMEMBER_PASSWORD_BEAN";

    /**
     * Properties of entity RememberPasswordBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IsRemeber = new Property(1, boolean.class, "isRemeber", false, "IS_REMEBER");
        public final static Property Account = new Property(2, String.class, "account", false, "ACCOUNT");
        public final static Property Passowrd = new Property(3, String.class, "passowrd", false, "PASSOWRD");
        public final static Property Logined = new Property(4, boolean.class, "logined", false, "LOGINED");
    }


    public RememberPasswordBeanDao(DaoConfig config) {
        super(config);
    }
    
    public RememberPasswordBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"REMEMBER_PASSWORD_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"IS_REMEBER\" INTEGER NOT NULL ," + // 1: isRemeber
                "\"ACCOUNT\" TEXT," + // 2: account
                "\"PASSOWRD\" TEXT," + // 3: passowrd
                "\"LOGINED\" INTEGER NOT NULL );"); // 4: logined
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REMEMBER_PASSWORD_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RememberPasswordBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getIsRemeber() ? 1L: 0L);
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(3, account);
        }
 
        String passowrd = entity.getPassowrd();
        if (passowrd != null) {
            stmt.bindString(4, passowrd);
        }
        stmt.bindLong(5, entity.getLogined() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RememberPasswordBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getIsRemeber() ? 1L: 0L);
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(3, account);
        }
 
        String passowrd = entity.getPassowrd();
        if (passowrd != null) {
            stmt.bindString(4, passowrd);
        }
        stmt.bindLong(5, entity.getLogined() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RememberPasswordBean readEntity(Cursor cursor, int offset) {
        RememberPasswordBean entity = new RememberPasswordBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getShort(offset + 1) != 0, // isRemeber
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // account
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // passowrd
            cursor.getShort(offset + 4) != 0 // logined
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RememberPasswordBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIsRemeber(cursor.getShort(offset + 1) != 0);
        entity.setAccount(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPassowrd(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLogined(cursor.getShort(offset + 4) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RememberPasswordBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RememberPasswordBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RememberPasswordBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
