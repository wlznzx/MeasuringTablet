package alauncher.cn.measuringtablet.database.greenDao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import alauncher.cn.measuringtablet.utils.StringConverter;
import java.util.List;

import alauncher.cn.measuringtablet.bean.CodeBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CODE_BEAN".
*/
public class CodeBeanDao extends AbstractDao<CodeBean, Long> {

    public static final String TABLENAME = "CODE_BEAN";

    /**
     * Properties of entity CodeBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CodeID = new Property(0, Long.class, "codeID", true, "_id");
        public final static Property UseTemplateID = new Property(1, Long.class, "useTemplateID", false, "USE_TEMPLATE_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property MachineTool = new Property(3, String.class, "machineTool", false, "MACHINE_TOOL");
        public final static Property Parts = new Property(4, String.class, "parts", false, "PARTS");
        public final static Property IsEnableStep = new Property(5, boolean.class, "isEnableStep", false, "IS_ENABLE_STEP");
        public final static Property WorkpiecePic = new Property(6, byte[].class, "workpiecePic", false, "WORKPIECE_PIC");
        public final static Property DefaultTitles = new Property(7, String.class, "defaultTitles", false, "DEFAULT_TITLES");
    }

    private final StringConverter defaultTitlesConverter = new StringConverter();

    public CodeBeanDao(DaoConfig config) {
        super(config);
    }
    
    public CodeBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CODE_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: codeID
                "\"USE_TEMPLATE_ID\" INTEGER," + // 1: useTemplateID
                "\"NAME\" TEXT," + // 2: name
                "\"MACHINE_TOOL\" TEXT," + // 3: machineTool
                "\"PARTS\" TEXT," + // 4: parts
                "\"IS_ENABLE_STEP\" INTEGER NOT NULL ," + // 5: isEnableStep
                "\"WORKPIECE_PIC\" BLOB," + // 6: workpiecePic
                "\"DEFAULT_TITLES\" TEXT);"); // 7: defaultTitles
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CODE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CodeBean entity) {
        stmt.clearBindings();
 
        Long codeID = entity.getCodeID();
        if (codeID != null) {
            stmt.bindLong(1, codeID);
        }
 
        Long useTemplateID = entity.getUseTemplateID();
        if (useTemplateID != null) {
            stmt.bindLong(2, useTemplateID);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String machineTool = entity.getMachineTool();
        if (machineTool != null) {
            stmt.bindString(4, machineTool);
        }
 
        String parts = entity.getParts();
        if (parts != null) {
            stmt.bindString(5, parts);
        }
        stmt.bindLong(6, entity.getIsEnableStep() ? 1L: 0L);
 
        byte[] workpiecePic = entity.getWorkpiecePic();
        if (workpiecePic != null) {
            stmt.bindBlob(7, workpiecePic);
        }
 
        List defaultTitles = entity.getDefaultTitles();
        if (defaultTitles != null) {
            stmt.bindString(8, defaultTitlesConverter.convertToDatabaseValue(defaultTitles));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CodeBean entity) {
        stmt.clearBindings();
 
        Long codeID = entity.getCodeID();
        if (codeID != null) {
            stmt.bindLong(1, codeID);
        }
 
        Long useTemplateID = entity.getUseTemplateID();
        if (useTemplateID != null) {
            stmt.bindLong(2, useTemplateID);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String machineTool = entity.getMachineTool();
        if (machineTool != null) {
            stmt.bindString(4, machineTool);
        }
 
        String parts = entity.getParts();
        if (parts != null) {
            stmt.bindString(5, parts);
        }
        stmt.bindLong(6, entity.getIsEnableStep() ? 1L: 0L);
 
        byte[] workpiecePic = entity.getWorkpiecePic();
        if (workpiecePic != null) {
            stmt.bindBlob(7, workpiecePic);
        }
 
        List defaultTitles = entity.getDefaultTitles();
        if (defaultTitles != null) {
            stmt.bindString(8, defaultTitlesConverter.convertToDatabaseValue(defaultTitles));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CodeBean readEntity(Cursor cursor, int offset) {
        CodeBean entity = new CodeBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // codeID
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // useTemplateID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // machineTool
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // parts
            cursor.getShort(offset + 5) != 0, // isEnableStep
            cursor.isNull(offset + 6) ? null : cursor.getBlob(offset + 6), // workpiecePic
            cursor.isNull(offset + 7) ? null : defaultTitlesConverter.convertToEntityProperty(cursor.getString(offset + 7)) // defaultTitles
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CodeBean entity, int offset) {
        entity.setCodeID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUseTemplateID(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMachineTool(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setParts(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsEnableStep(cursor.getShort(offset + 5) != 0);
        entity.setWorkpiecePic(cursor.isNull(offset + 6) ? null : cursor.getBlob(offset + 6));
        entity.setDefaultTitles(cursor.isNull(offset + 7) ? null : defaultTitlesConverter.convertToEntityProperty(cursor.getString(offset + 7)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CodeBean entity, long rowId) {
        entity.setCodeID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CodeBean entity) {
        if(entity != null) {
            return entity.getCodeID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CodeBean entity) {
        return entity.getCodeID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
